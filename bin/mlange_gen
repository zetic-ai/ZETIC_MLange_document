#!/usr/bin/env python3
import argparse
import os
import urllib.request
import urllib.error
import urllib.parse
import re
import json

boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
 
def email_validation(email):
    return re.fullmatch(regex, email)
        
def encode_multipart_formdata(fields, files):
    lines = []
    for key, value in fields.items():
        lines.append(f'--{boundary}')
        lines.append(f'Content-Disposition: form-data; name="{key}"')
        lines.append('')
        lines.append(value)

    for key, filename in files:
        lines.append(f'--{boundary}')
        lines.append(f'Content-Disposition: form-data; name="{key}"; filename="{os.path.basename(filename)}"')
        lines.append('Content-Type: application/octet-stream')
        lines.append('')
        with open(filename, 'rb') as f:
            lines.append(f.read().decode('latin-1'))

    lines.append(f'--{boundary}--')
    lines.append('')
    body = '\r\n'.join(lines)
    return body.encode('latin-1')


def profile_model(model, inputs):
    
    model_name = args.m.split('.')[0]
    input_paths = args.i.replace(' ', '').split(',')
 
    if not os.path.isfile(args.m):
        print(f'{args.m} is not valid file.')
        exit()
    
    for input_path in input_paths:
        if not os.path.isfile(input_path):
            print(f'{input_path} is not valid file.')
            exit()
    
    print('# Enter your email to receive updates from us')
    print('# Press Enter to skip')
    while True:
        email = input('Email : ')
        if len(email) == 0 or email_validation(email):
            break 
        else:
            print('Email is not valid.')
    
    url = 'https://gcp.zeticai.com'
    
    fields = {'name': model_name, 'email': email}
    files = [
        ('model', args.m),
    ]
    
    for input_path in input_paths:
        files.append(('inputs', input_path))
        
    data = encode_multipart_formdata(fields, files)
    
    print('File Uploading...')
    request = urllib.request.Request(url, data=data, headers={'Content-Type': f'multipart/form-data; boundary={boundary}'})

    try:
        response = urllib.request.urlopen(request)
        print(f'MLange Model Key : {response.read().decode("utf-8")}')
        print('MLange model profiling started. It might takes 10 or more minutes.')
        print('The number of model downloads is limited. You can download it 5 times during the trial.')
    except urllib.error.HTTPError as e:
        print('Error occurred while uploading files.')
        print('Contact us. software@zetic.ai')
        print(f'Code : {e.code}, Reason : {e.reason}')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Zetic.Mentat Converter: On-device Model generator')
    parser.add_argument('-m', help='Input PyTorch/ONNX Model path to be converted')
    parser.add_argument('-i', help='Input sample paths to be converted, e.g.(input1.np,input2.np,...)')
    
    args = parser.parse_args()
    
    if args.m and args.i:
        profile_model(args.m, args.i)
    else:
        print("Argument not valid. check path of input files.")
